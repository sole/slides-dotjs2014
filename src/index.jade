doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Tools for the 21st Century Musician

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section.intro
        h1 Tools for the<br/>21st Century Musician

      section.supposition
        h3.bullet Let’s start with a supposition:
        h2.bullet You all are artists
        h1.bullet and very edgy!

      section.supposition
        h3.bullet So you want to break fronteers;
        h2.bullet go where no one has been before:
        h1.bullet bring your art<br />to the web!

      section.supposition
        h3.bullet Of course,
        h1.bullet with <tt>&lt;audio&gt;</tt>
          span.bullet , eh?


      section
        h2.bullet We <em>could</em> use it...
        pre.bullet
          code.language-markup.
            &lt;audio src="cool_song.ogg" controls preload&gt;&lt/audio&gt;
            
        h3.bullet This would...
        ul
          li initiate a network request for loading
          li deal with decoding/streaming/buffering
          li render audio controls
          li display progress indicator, time...

      section
        h3.bullet It also exposes methods
        ul
          li load
          li play
          li pause


      section
        h3.bullet And can also dispatch events
        ul
          li loadeddata
          li error
          li ended
          li ...

      
      section
        h2.bullet But it has shortcomings
        ul
          li no accurate scheduling
          li hacks for triggering multiple instances
          li they're associated to a DOM element
          li output goes straight to the speakers
          li no fancy visualisations
          li some OS display a fullscreen player

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h1 This won’t do<br />for edgy artists

      section
        h3.bullet Is it all over?
        h2.bullet Do we just give up and<br />start writing native apps?
        h1.bullet NO.


      section
        h1 Web Audio<br />to the rescue!


      section
        h2.bullet Web Audio
        h3.bullet accurately places sounds in space and time
        ul
          li fully controllable with a JS API
          li interoperable with other Web APIs
          li not attached to the DOM
          li runs in a separate thread
          li supported everywhere <a href="https://connect.microsoft.com/IE/feedback/details/793720/ie11-feature-request-support-for-web-audio-api">except IE</a>

      section
        h3.bullet So how does it work?

      section
        h2.bullet 1) create an audio context
        pre.bullet
          code.language-javascript.
            var audioContext = new AudioContext();
        h3.bullet “Where everything happens”

      section
        h2.bullet 2) use instance methods to<br />create audio nodes
        pre.bullet
          code.language-javascript.
            var oscillator = audioContext.createOscillator();

      section
        h2.bullet 3) connect nodes to<br />build the audio graph
        pre.bullet
          code.language-javascript.
            oscillator.connect(audioContext.destination);

      section
        h3 The audio graph
        img(src='images/modular-routing.png', alt='modular routing in web audio', class='filter-invert')

      section
        h3.bullet Nodes taxonomy
        ul
          li audio emission
          li audio manipulation
          li audio analysis

      section
        h2.bullet 4) control nodes with their JS API
        pre.bullet
          code.language-javascript.
            oscillator.start();

      section
        h2.bullet All together
        pre
          code.language-javascript.
            var audioContext = new AudioContext();
            var oscillator = audioContext.createOscillator();
            oscillator.connect(audioContext.destination);
            oscillator.start(audioContext.currentTime);

      section
        h1 It’s a matter of time

      section
        h3.bullet In order to get smoothly playing sounds,
        h2.bullet Web Audio runs in the future
        p.bullet and everything is scheduled ahead of time.


      section
        p TODO: UI vs Audio thread timing, and the audio buffer that must be fed continuously

      section
        h2.bullet Starting oscillators
        pre.bullet
          code.language-javascript.
            // start it 'now'
            oscillator.start(audioContext.currentTime);
        pre.bullet
          code.language-javascript.
            // start it 3 seconds from 'now'
            oscillator.start(audioContext.currentTime + 3);

      section
        h2.bullet Stopping oscillators
        pre.bullet
          code.language-javascript.
            // stop it 'now'
            oscillator.stop(audioContext.currentTime);
        pre.bullet
          code.language-javascript.
            // stop it in 3 seconds from 'now'
            oscillator.stop(audioContext.currentTime + 3);

      section
        h2.bullet Restarting?
        pre
          code.language-javascript.
            // start it now
            var now = audioContext.currentTime;
            oscillator.start(now);
            // stop it 3 seconds later
            oscillator.stop(now + 3);
            // start it again another 3 seconds after
            oscillator.start(now + 6);

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 That won’t work.

      section
        h3.bullet Because of performance reasons,
        h2.bullet some nodes are one-use only.

      section
        h3.bullet Nodes that have been stopped
        h2.bullet are automatically disposed of
        h3.bullet as long as you don't keep <a href="http://webaudio.github.io/web-audio-api/#lifetime-1">references</a>
      
      section
        h3 I use
        h2 Firefox’s Web Audio Editor
        h3 to watch out for memory leaks

      section
        h3 Leaked nodes
        img(src='images/leaked-nodes.png', alt='leaked nodes in web audio', style='height: 80%; width: auto')

      section
        h3.bullet But you can
        h2.bullet write your own wrappers
        h3.bullet to work around this.

      section
        h3 example:
        h2 Oscillator.js

      section
        h2.bullet Oscillator.js (1/3)
        pre
          code.language-javascript.
            function Oscillator(context) {
              var node = null;
              this.start = function(when) {
                ensureNodeIsLive();
                node.start(when);
              };

      section
        h2.bullet Oscillator.js (2/3)
        pre
          code.language-javascript.
            this.stop = function(when) {
              if(node === null) {
                return;
              }
              node.stop(when);
              node = null;
            };

      section
        h2.bullet Oscillator.js (3/3)
        pre
          code.language-javascript.
            function ensureNodeIsLive() {
              if(node === null) {
                node = context.createOscillator();
              }
            }

      section
        h2.bullet Using it
        pre
          code.language-javascript.
            var ctx = new AudioContext();
            var osc = new Oscillator(ctx);
            var now = ctx.currentTime;
            osc.start(now);
            osc.stop(now + 3);
            osc.start(now + 6);
            // ^^^ works!
      
      section
        h2 Oscillator.js
        iframe(src='examples/regenerate_oscillator')

      section
        h1 Look at that sound

      section
        h2.bullet Analyser Nodes
        h3.bullet provide frequency and time data about their input

      section
        h3 example:
        h2 an oscilloscope
        
      section
        h2 Oscilloscope (1/2)
        pre.bullet
          code.language-javascript.
            var analyser = context.createAnalyser();
            analyser.fftSize = 2048;
            var analyserData = new Float32Array(
              analyser.frequencyBinCount
            );

            oscillator.connect(analyser);

      section
        h2 Oscilloscope (2/2)
        pre.bullet
          code.language-javascript.
            function animate() {
              requestAnimationFrame(animate);
              analyser.getFloatTimeDomainData(analyserData);
              drawSample(canvas, analyserData);
            }

      section
        h2 Oscilloscope
        iframe(src='examples/regenerate_oscillator_analysed')


      section
        h1 Properties, k-rates, a-rates, and AudioParams
        h3 There is a reason for everything.

      section
        h3 Node instances are just JavaScript objects
        h2 They have properties
        h3 and we can set them!

      section
        h3.bullet for example,
        h2.bullet <tt>oscillator.type</tt>
        ul.horizontal
          li sine
          li square
          li sawtooth
          li triangle
          li custom

        pre.bullet
          code.language-javascript.
            oscillator.type = 'square';

      section
        h2 Wave types
        iframe(src='examples/oscillator_wave_type')


      section
        h3.bullet But if we try to change the frequency...
        pre.bullet
          code.language-javascript.
            oscillator.frequency = 880;
        h3.bullet ... it doesn’t work!

      section
        h3 Why?


      section
        div.bullet
          h2
            tt oscillator.frequency
          h3 is an
          h2
            tt AudioParam
        h2.bullet It is <em>special</em>

      section
        pre.bullet
          code.language-javascript.
            // Access it with
            oscillator.frequency.value = 880;

      section
        h3.bullet So what is the point<br />of Audio Params?
        h2.bullet Superpowers.

      section
        h3.bullet Superpower #1
        h2.bullet Scheduling changes<br />with accurate timing

      // TODO a-params and k-params

      section
        h2.bullet What not to use
        h3.bullet when building curves and fades
        ul
          li setInterval
          li setTimeout

      section
        h3 What you expect is not what you get
        iframe(src='examples/step_sounds')


      section
        h3.bullet Instead,
        h2.bullet schedule audio parameter changes
        h3.bullet using
        ul
          li <tt>setValueAtTime</tt>
          li <tt>linearRampToValueAtTime</tt>
          li <tt>exponentialRampToValueAtTime</tt>
          li <tt>setTargetAtTime</tt>
          li <tt>setValueCurveAtTime</tt>

      section
        h3.bullet Web Audio will interpolate between events
        ul
          li k-params: updating values every 128 samples
          li a-params: updating values every sample
        h3.bullet and you get effortlessly smooth transitions.

      section
        h3.bullet Go from 440 to 880 Hz in 3 seconds
        pre.bullet
          code.language-javascript.
            osc.frequency.setValueAtTime(
              440,
              audioContext.currentTime
            );
            osc.frequency.linearRampToValueAtTime(
              880,
              audioContext.currentTime + 3
            );

      section
        h3.bullet A practical application of timed events
        h2.bullet ADSR envelopes

      section
        h3.bullet <em>ADSwhat...?</em>
        img(src='./examples/_data/adsr.png', class='bullet filter-invert', style='height: 70%; width=auto;')
        h3.bullet Attack / Decay / Sustain / Release


      section
        h3.bullet Relatively easy to configure and compute
        ul.horizontal
          li
            img(src='images/subtractor.jpg', alt='subtractor')
          li
            img(src='images/malstrom.jpg', alt='malstrom')

        h3.bullet (so very common in substractive synthesis!)


      section
        h3 ADSR part 1: Attack/Decay/Sustain
        pre.bullet
          code.language-javascript.
            param.setValueAtTime(0, t);
            param.linearRampToValueAtTime(1, t + attackLength);
            param.linearRampToValueAtTime(sustainValue,
              t + attackLength + decayLength);

      section
        h3 ADSR part 2: Release phase
        pre.bullet
          code.language-javascript.
            param.linearRampToValueAtTime(0, t + releaseLength);


      section
        h3.bullet More natural sounds with an
        h2.bullet ADSR envelope
        h3.bullet and
        h2.bullet Gain Nodes


      section
        h2.bullet Gain nodes
        h3.bullet multiply their input by their <tt>gain</tt> value
        p.bullet so they can be used to
        ul.horizontal
          li quieten or 
          li amplify sounds
        
      section
        h3.bullet A gain node in practise
        pre.bullet
          code.language-javascript.
            var ctx = new AudioContext();
            var osc = ctx.createOscillator();
            var gain = ctx.createGain();

            osc.connect(gain);
            gain.connect(ctx.destination);
            gain.gain.setValueAtTime(0.5, ctx.currentTime);


      section
        h3.bullet If we schedule changes to the <tt>gain</tt> parameter, we get
        h2.bullet a volume envelope
        iframe(src='examples/envelopes', class='bullet')


      section
        h3.bullet Of course,
        h2.bullet cancelling events
        h3.bullet is possible

        pre.bullet
          code.language-javascript.
            param.cancelScheduledEvents(when);

        p.bullet removes all events from the list, from <tt>when</tt> onwards.

      section
        h3.bullet Superpower #2
        h2.bullet Modulation

      section
        h3.bullet Connect the output of one node<br />to another node’s AudioParam
        img(src='./images/modulation.gif', class='bullet filter-invert', style='height: 70%; width=auto;')
        p.bullet and get interesting effects

      section
        h3.bullet Modulation in practise
        h2.bullet LFOs
        h3.bullet (Low Frequency Oscillators)

      section
        h3.bullet We can’t hear those frequencies...
        h2.bullet but can use them<br />to alter values<br />in a range<br />we can hear

      section
        img(src='./examples/_data/lfo.png', class='bullet', style='width: 80%; height: auto;')


      section
        h3.bullet Example:
        h2.bullet SPOOKY SOUNDS
        h3.bullet alter an oscillator’s frequency <br />with another oscillator’s output


      section
        h3.bullet Watch out!

        pre.bullet
          code.language-javascript.
            var context = new AudioContext();
            var osc = context.createOscillator();
            var lfo = context.createOscillator();
            var gain = context.createGain();
            osc.connect(context.destination);
            lfo.connect(gain);
            // The output from gain is in the [-1, 1] range
            gain.gain.value = 100;
            // now the output from gain is in the [-100, 100] range!
            gain.connect(osc.frequency);


      section
        h3.bullet Keep watching out

        pre.bullet
          code.language-javascript.
            osc.frequency.value = 440;
            lfo.frequency.value = 1; // 1Hz = once per second
            osc.start();
            lfo.start();
      
      section
        img(src='./images/spooky-routing.png', class='bullet filter-invert', style='width: 70%; height=auto;')
 
      section
        h2 Spooky LFOs
        iframe(src='examples/spooky_lfos')


      section
        h3.bullet Transforming the sound
        h2.bullet Filters

      section
        h3.bullet An implementation of common low-order filters is provided
        ul.horizontal
          li lowpass
          li highpass
          li bandpass
          li lowshelf
          li highshelf
          li peaking
          li notch
      
      section
        h3 Filtered oscillator
        iframe(src='examples/regenerate_oscillator_filtered_analysed/')


      section
        h1.bullet Playing existing sounds

      section
        h2.bullet <tt>AudioBufferSourceNode</tt>
        h3.bullet for short samples (&lt; 1 min)
        h2.bullet <tt>MediaElementAudioSourceNode</tt>
        h3.bullet for longer sounds


      section
        h3.bullet Each 
        h2.bullet <tt>AudioBufferSourceNode</tt>
        h3.bullet requires an
        h2.bullet <tt>AudioBufferSource</tt>

      section
        h3.bullet 1) Loading data for the AudioBufferSource
        pre
          code.language-javascript.
            var context = new AudioContext();
            var request = new XMLHttpRequest();
            request.open('GET', samplePath, true);
            request.responseType = 'arraybuffer';
            request.onload = function() {
              context.decodeAudioData(
                request.response, loadCb, errorCb
              );
            };

      section
        h3.bullet 2) Instancing the AudioBufferSourceNode
        pre
          code.language-javascript.
            var bufferSource = context.createBufferSource();

            function loadedCallback(bufferSource) {
              bufferSource.buffer = bufferSource;
              bufferSource.connect(context.destination);
            }


      section
        h3.bullet An uncanny similarity to oscillators
        pre.bullet
          code.language-javascript.
            bufferSource.start(when);
            bufferSource.stop(when);

        p.bullet They even have to be recreated like oscillators!

      section
        h2.bullet Despair not
        h3.bullet You can create them again and reuse the <tt>buffer</tt>

      
      section
        h2 pewpewmatic
        iframe(src='examples/pewpewmatic')

      section
        h2.bullet <tt>MediaElementAudioSourceNode</tt>
        h3.bullet Takes the output of <tt>&lt;audio&gt;</tt> or <tt>&lt;video&gt;</tt><br />and streams it into the audio graph.

      section
        pre.bullet
          code.language-javascript.
            var video = document.querySelector('video');
            var videoNode = 
              context.createMediaElementAudioSource(
                video
              );
            videoNode.connect(context.destination);


      section
        h2 Media element
        iframe(src='examples/mediaelement')


      section
        h3.bullet This is just an introduction
        h2.bullet There are many more<br />built-in node types
        ul
          li delay (echos)
          //li filter (low/pass/high frequencies)
          li panning (3D sounds!)
          li convolver (reverberation)
          li splitter &amp; merger (channel manipulation)
          li waveshaper (distortion effects)
          li compressor (for maximum ooomph)

      section
        h2.bullet Possibilities abound
        ul
          li getUserMedia + MediaElementAudioSourceNode
          li Web Audio Workers - generate audio in realtime with JavaScript
          li OfflineAudioContext - Beat detection, audio rendering, etc...
          li ...
          li You set the limit
          li (you are EDGY!)


      section
        h1 And there is<br />STILL more!


      section
        h3.bullet I've been hacking on Web Audio stuff for the last 3 years
      section
        h3.bullet so I've done the same things over and over
        h2.bullet in different ways


      section
        h3.bullet I've also spoken to many people about audio stuff
        ul
          li Angelina Fabbro
          li Jordan Santell
          li Max Ogden

      section
        h3.bullet At some point the stars aligned:
        ul
          li I <em>finally</em> understood AudioParams
          li I found the way to simulate custom audio nodes
          li and I was going to speak about music in the 21st century

      section
        h3.bullet Suddenly everything made sense

      section
        h3.bullet It was, at last, the moment for...
 
      section.emphatic-text(data-bespoke-backdrop='openmusic')
        h1.bullet OpenMusic
        h3.bullet Modules and components<br/>for Web Audio<br /><a href="https://github.com/openmusic">github.com/openmusic</a>


      section
        h2.bullet OpenMusic right now:
        ul
          li web components: oscilloscope, slider
          li audio components: oscillator, sample player, clipper, dcbias
          li eventing: tracker player
          li audio generation: noise functions (white, brown, pink)
        h3.bullet All based on <a href="https://npmjs.org/">npm</a>, dependencies sorted out on <tt>npm install</tt>


      section
        h2.bullet How it looks like
        pre.bullet
          code.language-javascript.
            var Oscillator = require('openmusic-oscillator');
            var ac = new AudioContext();
            var osc = Oscillator(ac);
            osc.connect(ac.destination);
            osc.start();
        h3.bullet i.e. pretty much like other <tt>AudioNodes</tt>

      section
        h2.bullet Principles
        ul
          li behave like standard <tt>AudioNode</tt>s
          li one functionality, one module
          li composable
          
      section
        h2.bullet Our wish:
        ul
          li People use these bits and pieces
          li Or they look at them and build their own and we can use theirs
          li Bits and pieces become tools
          li A web audio ecosystem forms...
        h3.bullet ... and everyone gets to create lots of music!


      section(data-bespoke-state='title')
        h3 Thanks!
        h2 <a href="https://twitter.com/supersole">@supersole</a>
        h2 <a href="http://soledadpenades.com">soledadpenades.com</a>




    script(src='build/build.js')
